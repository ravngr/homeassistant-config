---

pkg_forecast:
  input_number:
    forecast_threshold_cold:
      name: "Forecast Cold Threshold"
      icon: "mdi:thermometer-chevron-down"
      min: -5
      max: 25
      step: 0.5
      unit_of_measurement: "°C"

    forecast_threshold_hot:
      name: "Forecast Hot Threshold"
      icon: "mdi:thermometer-chevron-up"
      min: 15
      max: 40
      step: 0.5
      unit_of_measurement: "°C"

    forecast_hours:
      name: "Forecast Window"
      icon: "mdi:clock-start"
      min: 1
      max: 24
      step: 1
      unit_of_measurement: "hour"

  template:
    - trigger:
        - platform: time_pattern
          minutes: /5
        - platform: state
          entity_id:
            - input_number.forecast_hours
      action:
        - service: weather.get_forecasts
          data:
            type: hourly
          target:
            entity_id: "{{ states('sensor.secret_forecast_weather_entity_id') }}"
          response_variable: hourly
      sensor:
        - name: forecast_temperature_max
          unique_id: 8d47d130-24f8-40c6-acc5-79607eac18c3
          <<: &forecast-sensor-common
            device_class: temperature
            unit_of_measurement: °C
          <<: &forecast-availability
            availability: >-
              {{
                not is_state(
                  states('sensor.secret_forecast_weather_entity_id'),
                  [
                    'unknown',
                    'unavailable'
                  ]
                )
              }}
          state: >-
            {{
              hourly[states('sensor.secret_forecast_weather_entity_id')].forecast |
              selectattr(
                'datetime',
                '<=',
                (
                  now() + timedelta(hours=states('input_number.forecast_hours') | float(0))
                ).isoformat()
              ) |
              map(attribute='temperature') |
              max
            }}
          # attributes:
          #   forecast_hot: >-
          #     {{
          #       hourly[states('sensor.secret_forecast_weather_entity_id')].forecast |
          #       selectattr(
          #         'datetime',
          #         '<=',
          #         (
          #           now() + timedelta(hours=states('input_number.forecast_hours') | float(0))
          #         ).isoformat()
          #       ) |
          #       selectattr(
          #         'temperature',
          #         '>=',
          #         states('input_number.forecast_threshold_hot') | float(30)
          #       ) |
          #       list
          #     }}

        - name: forecast_temperature_min
          unique_id: 55d9b139-9cd4-4541-a977-845d2af0a11d
          <<:
            - *forecast-sensor-common
            - *forecast-availability
          state: >-
            {{
              hourly[states('sensor.secret_forecast_weather_entity_id')].forecast |
              selectattr(
                'datetime',
                '<=',
                (
                  now() + timedelta(hours=states('input_number.forecast_hours') | float(0))
                ).isoformat()
              ) |
              map(attribute='temperature') |
              min
            }}
          # attributes:
          #   forecast_cold: >-
          #     {{
          #       hourly[states('sensor.secret_forecast_weather_entity_id')].forecast |
          #       selectattr(
          #         'datetime',
          #         '<=',
          #         (
          #           now() + timedelta(hours=states('input_number.forecast_hours') | float(0))
          #         ).isoformat()
          #       ) |
          #       selectattr(
          #         'temperature',
          #         '<=',
          #         states('input_number.forecast_threshold_cold') | float(15)
          #       ) |
          #       list
          #     }}

        - name: forecast_temperature_mean
          unique_id: 3d3a2651-c55d-46ad-b739-9e6e3bb1334a
          <<:
            - *forecast-sensor-common
            - *forecast-availability
          state: >-
            {{
              hourly[states('sensor.secret_forecast_weather_entity_id')].forecast |
              selectattr(
                'datetime',
                '<=',
                (
                  now() + timedelta(hours=states('input_number.forecast_hours') | float(0))
                ).isoformat()
              ) |
              map(attribute='temperature') |
              average |
              round(1)
            }}
          # attributes:
          #   forecast: "{{ hourly[states('sensor.secret_forecast_weather_entity_id')].forecast }}"
          #   forecast_filtered: >-
          #     {{
          #       hourly[states('sensor.secret_forecast_weather_entity_id')].forecast |
          #         selectattr(
          #         'datetime',
          #         '<=',
          #         (
          #           now() + timedelta(hours=states('input_number.forecast_hours') | float(0))
          #         ).isoformat()
          #       ) |
          #       list
          #     }}

    - binary_sensor:
        - name: forecast_hot
          unique_id: "5f2ae338-8897-4ab3-a462-62bcc458d260"
          icon: "mdi:thermometer-chevron-up"
          device_class: heat
          <<: *forecast-availability
          state: >-
            {{
              (states('sensor.forecast_temperature_max') | float) >=
              (states('input_number.forecast_threshold_hot') | float)
            }}

        - name: forecast_cold
          unique_id: "258ea6db-d37e-406f-aa30-6c26c41ade66"
          icon: "mdi:thermometer-chevron-down"
          device_class: cold
          <<: *forecast-availability
          state: >-
            {{
              (states('sensor.forecast_temperature_min') | float) <=
              (states('input_number.forecast_threshold_cold') | float)
            }}

  homeassistant:
    customize:
      binary_sensor.forecast_cold:
        friendly_name: "Forecasting Cold Weather"

      binary_sensor.forecast_hot:
        friendly_name: "Forecasting Hot Weather"

      sensor.forecast_temperature_max:
        friendly_name: "Forecast Maximum Temperature"
        icon: "mdi:thermometer-chevron-up"

      sensor.forecast_temperature_min:
        friendly_name: "Forecast Minimum Temperature"
        icon: "mdi:thermometer-chevron-down"

      sensor.forecast_temperature_mean:
        friendly_name: "Forecast Average Temperature"
        icon: "mdi:thermometer-auto"
